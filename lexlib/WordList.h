// Scintilla source code edit control
/** @file WordList.h
 ** Hold a list of words.
 **/
// Copyright 1998-2010 by Neil Hodgson <neilh@scintilla.org>
// The License.txt file describes the conditions under which this software may be distributed.
#pragma once

namespace Lexilla {

/**
 */
class WordList final {
public:
	using range_t = unsigned int;
//++Autogenerated -- start of section automatically generated
	enum KeywordAttr {
		KeywordAttr_Default = 0,
		KeywordAttr_MakeLower = 1,
		KeywordAttr_PreSorted = 2,
	};
//--Autogenerated -- end of section automatically generated

private:
	// Each word contains at least one character - a empty word acts as sentinel at the end.
	char **words = nullptr;
	char *list = nullptr;
	//range_t len = 0;
#if 1
	// ASCII graphic character only, most word starts with character in '_a-zA-Z'
	static constexpr unsigned char MinIndexChar = ' ' + 1;
	range_t ranges[0x7f - MinIndexChar];
#else
	static constexpr unsigned char MinIndexChar = '@';
	range_t ranges[64 - 2*sizeof(char *)/4]; // make sizeof(WordList) == 256
#endif
public:
	WordList() noexcept {
		// Prevent warnings by static analyzers about uninitialized ranges.
		ranges[0] = {};
	}
	// Deleted so WordList objects can not be copied.
	WordList(const WordList &) = delete;
	WordList(WordList &&) = delete;
	WordList &operator=(const WordList &) = delete;
	WordList &operator=(WordList &&) = delete;
	~WordList();
	operator bool() const noexcept {
		//return len != 0;
		return words != nullptr;
	}
#if 0
	bool operator!=(const WordList &other) const noexcept;
	bool operator==(const WordList &other) const noexcept {
		return !(*this != other);
	}
	range_t Length() const noexcept {
		return len;
	}
#endif
	void Clear() noexcept;
	[[nodiscard]] bool Set(const char *s, KeywordAttr attribute = KeywordAttr_Default);
	bool InList(const char *s) const noexcept;
	bool InListPrefixed(const char *s, char marker) const noexcept;
	bool InListAbbreviated(const char *s, char marker) const noexcept;
	bool InListAbridged(const char *s, char marker) const noexcept;
	const char *WordAt(range_t n) const noexcept;
};

}
